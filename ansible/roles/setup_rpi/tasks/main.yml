---
- name: Update remote
  ansible.builtin.apt:
    update_cache: true
    autoclean: true
    autoremove: true
    upgrade: "dist"

- name: Install required packages
  ansible.builtin.apt:
    pkg: "{{ required_rpi_packages.default }}"

- name: Create magic mirror directory
  ansible.builtin.file:
    path: "{{ default_working_dir }}"
    state: directory
    mode: 0755
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user | default(ansible_user_id) }}"

- name: Set ownership of magic mirror directory
  ansible.builtin.file:
    path: "{{ default_working_dir }}"
    state: directory
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user | default(ansible_user_id) }}"
    recurse: true

- name: Set OS var
  ansible.builtin.set_fact:
    os_type: "{{ ansible_distribution | lower }}"

- name: Install OS specific packages
  ansible.builtin.apt:
    pkg: "{{ required_rpi_packages[os_type] }}"

- name: Copy OS specific files
  ansible.builtin.copy:
    src: "{{ os_type }}/"
    dest: "{{ default_working_dir }}/"
    mode: 0755

- name: Install Python libraries
  ansible.builtin.pip:
    requirements: "{{ default_working_dir }}/requirements.txt"
  ignore_errors: true

- name: Copy run script
  ansible.builtin.template:
    src: "{{ os_type }}/run.sh.j2"
    dest: "{{ default_working_dir }}/run.sh"
    mode: 0755

- name: Run OS specific tasks
  ansible.builtin.include_tasks: "{{ os_type }}.yml"

- name: Install led service
  ansible.builtin.copy:
    src: disable-led.service
    dest: /etc/systemd/system
    mode: "0644"

- name: Enable & start service disable-led.service
  ansible.builtin.service:
    state: started
    daemon_reload: true
    name: disable-led.service

- name: Unconditionally reboot the machine
  ansible.builtin.reboot:
